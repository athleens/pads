functor TLexFun(structure Tokens : T_TOKENS 
			 structure TTokTable : TTOKENTABLE 
			 sharing TTokTable.Tokens = Tokens)=
   struct
    structure UserDeclarations =
      struct
type svalue = Tokens.svalue
type pos = int
type lexresult = (svalue,pos) Tokens.token
type errWarn = {err: pos*pos*string->unit, warn: pos*pos*string->unit}
type lexarg =  {comLevel : int ref, 
                sourceMap : SourceMap.sourcemap,
		charlist : string list ref,
		stringstart : int ref,  (* start of current string or comment*)
	        errWarn: errWarn}

type arg = lexarg
type ('a,'b) token = ('a,'b) Tokens.token

fun ordof (s, i) = Char.ord (String.sub (s, i))
fun dec (iRef : int ref) = iRef := (!iRef) - 1
fun inc (iRef : int ref) = iRef := (!iRef) + 1
fun chr i = String.str(Char.chr i)
fun ord s = Char.ord(String.sub(s, 0))
fun explode s = CharVector.foldr (fn (c, l) => str c :: l) [] s
fun implode strList = String.concat strList
fun hd [] = (print "c.lex: hd of empty\n";
	     raise Empty)
  | hd (h :: l)	= h

val eof = fn ({comLevel,errWarn,sourceMap,stringstart,charlist}:lexarg) => 
	   let val pos = Int.max(!stringstart+2, SourceMap.currPos sourceMap)
	    in if !comLevel>0 then (#err errWarn) (!stringstart,pos, "unclosed comment" )
		  	      else ();
	       Tokens.EOF(pos,pos)
	   end	
fun addString (charlist,s:string) = charlist := s :: (!charlist)
fun makeString charlist = (implode(rev(!charlist)) before charlist := nil)

fun mkHexInt (s,a,b,errWarn:errWarn)=((case (StringCvt.scanString (IntInf.scan StringCvt.HEX) (String.extract(s,2,NONE))) of
		  SOME i =>  i
		| _ => ((#err errWarn)(a,b,"trouble in parsing int");IntInf.fromInt(0)))
			handle OverFlow => ((#err errWarn)(a,b,"large int const");IntInf.fromInt(0)))

fun mkHexChar (args as (s, a, b, errWarn:errWarn)) : int (* returns a character sized integer *) = 
	let val i = mkHexInt args
            val i = (IntInf.toInt i) 
                    handle OverFlow => ((#err errWarn)(a,b,"large int const");0)
	in
	  if (i>255) then 
	    ((#warn errWarn) (a,b,"overflow in hexadecimal escape sequence");
	    (i mod 256))
	  else
       	    i
        end	

fun mkOctInt (s,a,b,errWarn:errWarn)
	= ((case (StringCvt.scanString (IntInf.scan StringCvt.OCT) s) of
		  SOME i => i
		| _ => ((#err errWarn)(a,b,"trouble in parsing int");IntInf.fromInt(0)))
			handle OverFlow => ((#err errWarn)(a,b,"large int const");IntInf.fromInt(0)))


fun mkOctChar (args as (s, a, b, errWarn:errWarn)) (* returns a character sized integer *) = 
	let val i = mkOctInt args
            val i = (IntInf.toInt i) 
                    handle OverFlow => ((#err errWarn)(a,b,"large int const");0)
	in
	  if (i>255) then 
	    ((#warn errWarn) (a,b,"overflow in octal escape sequence");
	    (i mod 256))
	  else
       	     i
        end	

fun mkInt (s,a,b,errWarn:errWarn) = ((case (StringCvt.scanString (IntInf.scan StringCvt.DEC) s) of
		  SOME i => i
		| _ => ((#err errWarn)(a,b,"trouble in parsing int");IntInf.fromInt(0)))
			handle OverFlow => ((#err errWarn)(a,b,"large int const");IntInf.fromInt(0)))

fun mkRealNum (s,a,b,errWarn:errWarn) = ((case (StringCvt.scanString Real.scan s) of
		   SOME r => r
		 | _ => ((#err errWarn)(a,b,"trouble in parsing real");0.0))
			handle OverFlow => ((#err errWarn)(a,b,"large real const"); 0.0))

val backslasha = 7

fun special_char(c,fst,last,errWarn:errWarn) =
		(case c of
			"\\a" => 7
		      | "\\b" => 8
		      | "\\f" => 12
		      | "\\n" => 10
		      | "\\r" => 13
		      | "\\t" => 9
		      | "\\v" => 11
	              | _ => ordof(c,1)
	                      (* strictly speaking, should only handle
                                \?, \\, \", \', but it is common
                                to simply ignore slash, and just use next char *)
		)


(* Notes on lexer states:
   INITIAL -- predefined start state and the default token state
   S -- inside a string (entered from INTITAL with ")
   C -- inside a comment (entered from INITIAL with /* )
   CC -- inside a C++ style comment
   Pc -- inside a pads comment
 *)


end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\011\011\011\011\011\011\011\011\011\105\107\011\105\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\105\103\102\011\011\100\097\083\081\080\078\075\074\070\066\061\
\\051\040\040\040\040\040\040\040\040\040\037\036\032\029\025\024\
\\011\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\023\011\022\020\018\
\\011\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\014\013\012\011\
\\011"
),
 (2, 
"\011\011\011\011\011\011\011\011\011\111\107\011\111\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\111\103\102\108\011\100\097\083\081\080\078\075\074\070\066\061\
\\051\040\040\040\040\040\040\040\040\040\037\036\032\029\025\024\
\\011\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\023\011\022\020\018\
\\011\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\014\013\012\011\
\\011"
),
 (3, 
"\113\113\113\113\113\113\113\113\113\113\116\113\113\114\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113"
),
 (5, 
"\117\117\117\117\117\117\117\117\117\120\107\117\120\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\120\117\117\117\117\117\117\117\117\117\118\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117"
),
 (6, 
"\117\117\117\117\117\117\117\117\117\122\107\117\122\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\122\117\117\121\117\117\117\117\117\117\118\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\117\
\\117"
),
 (7, 
"\123\123\123\123\123\123\123\123\123\123\138\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\135\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\124\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123"
),
 (9, 
"\139\139\139\139\139\139\139\139\139\139\142\139\139\140\139\139\
\\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\
\\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\
\\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\
\\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\
\\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\
\\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\
\\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\139\
\\139"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\000\
\\000\019\019\019\019\019\019\019\019\019\019\019\019\019\019\019\
\\019\019\019\019\019\019\019\019\019\019\019\000\000\000\000\019\
\\000\019\019\019\019\019\019\019\019\019\019\019\019\019\019\019\
\\019\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\028\026\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\031\030\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\034\033\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\\048\048\048\048\048\048\048\048\048\048\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\043\000\000\000\
\\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\043\000\000\000\
\\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\000\
\\045\045\045\045\045\045\045\045\045\045\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\045\045\045\045\045\045\045\045\045\045\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\045\045\045\045\045\045\045\045\045\045\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\050\050\050\050\050\050\050\050\050\050\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\050\050\050\050\050\050\050\050\050\050\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\\057\057\057\057\057\057\057\057\056\056\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\043\000\000\000\
\\000\000\000\000\000\041\000\000\052\000\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\043\000\000\000\
\\000\000\000\000\000\041\000\000\052\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\053\053\053\053\053\053\053\053\053\053\000\000\000\000\000\000\
\\000\053\053\053\053\053\053\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\053\053\053\053\053\053\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\053\053\053\053\053\053\053\053\053\053\000\000\000\000\000\000\
\\000\053\053\053\053\053\053\000\000\000\000\000\054\000\000\000\
\\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\000\
\\000\053\053\053\053\053\053\000\000\000\000\000\054\000\000\000\
\\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\\056\056\056\056\056\056\056\056\056\056\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\\057\057\057\057\057\057\057\057\056\056\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\060\000\000\000\
\\000\000\000\000\000\058\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\060\000\000\000\
\\000\000\000\000\000\058\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\065\000\000\064\000\063\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\\067\067\067\067\067\067\067\067\067\067\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\067\067\067\067\067\067\067\067\067\067\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\044\000\000\000\000\000\000\046\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\072\071\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\077\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (83, 
"\084\084\084\084\084\084\084\084\084\084\000\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\086\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084"
),
 (84, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (86, 
"\087\087\087\087\087\087\087\087\087\087\000\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\092\092\092\092\092\092\092\092\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\089\087\087\087\087\087\087\087\
\\087"
),
 (87, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\088\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (89, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\088\000\000\000\000\000\000\000\000\
\\090\090\090\090\090\090\090\090\090\090\000\000\000\000\000\000\
\\000\090\090\090\090\090\090\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\090\090\090\090\090\090\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (90, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\
\\090\090\090\090\090\090\090\090\090\090\000\000\000\000\000\000\
\\000\090\090\090\090\090\090\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\090\090\090\090\090\090\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (92, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\096\000\000\000\000\000\000\000\000\
\\093\093\093\093\093\093\093\093\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (93, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\095\000\000\000\000\000\000\000\000\
\\094\094\094\094\094\094\094\094\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (94, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\095\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (97, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\099\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (100, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\101\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (103, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\104\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (105, 
"\000\000\000\000\000\000\000\000\000\106\000\000\106\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\106\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (108, 
"\109\109\109\109\109\109\109\109\109\109\110\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109"
),
 (111, 
"\000\000\000\000\000\000\000\000\000\112\000\000\112\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\112\000\000\109\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (114, 
"\000\000\000\000\000\000\000\000\000\000\115\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (116, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\115\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (118, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\119\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (123, 
"\123\123\123\123\123\123\123\123\123\123\000\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\000\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\000\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\123\
\\123"
),
 (124, 
"\125\125\125\125\125\125\125\125\125\125\134\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\133\130\130\130\130\130\130\130\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\128\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\126\125\125\125\125\125\125\125\
\\125"
),
 (126, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\127\127\127\127\127\127\127\127\127\127\000\000\000\000\000\000\
\\000\127\127\127\127\127\127\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\127\127\127\127\127\127\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (128, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\129\129\129\129\129\129\129\129\129\129\129\129\129\129\129\129\
\\129\129\129\129\129\129\129\129\129\129\129\129\129\129\129\129\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (130, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\131\131\131\131\131\131\131\131\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (131, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\132\132\132\132\132\132\132\132\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (135, 
"\000\000\000\000\000\000\000\000\000\137\000\000\137\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\137\000\136\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (140, 
"\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (142, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [(N 10)], trans = 1},
{fin = [(N 10)], trans = 2},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [(N 10)], trans = 5},
{fin = [(N 10)], trans = 6},
{fin = [(N 55)], trans = 7},
{fin = [(N 55)], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [(N 271)], trans = 0},
{fin = [(N 125),(N 271)], trans = 0},
{fin = [(N 94),(N 271)], trans = 0},
{fin = [(N 129),(N 271)], trans = 14},
{fin = [(N 186)], trans = 0},
{fin = [(N 165)], trans = 0},
{fin = [(N 92),(N 271)], trans = 0},
{fin = [(N 269),(N 271)], trans = 18},
{fin = [(N 269)], trans = 18},
{fin = [(N 108),(N 271)], trans = 20},
{fin = [(N 153)], trans = 0},
{fin = [(N 90),(N 271)], trans = 0},
{fin = [(N 88),(N 271)], trans = 0},
{fin = [(N 127),(N 271)], trans = 0},
{fin = [(N 180),(N 271)], trans = 25},
{fin = [(N 195)], trans = 26},
{fin = [(N 176)], trans = 0},
{fin = [(N 139)], trans = 0},
{fin = [(N 144),(N 271)], trans = 29},
{fin = [(N 210)], trans = 0},
{fin = [(N 142)], trans = 0},
{fin = [(N 178),(N 271)], trans = 32},
{fin = [(N 136)], trans = 0},
{fin = [(N 192)], trans = 34},
{fin = [(N 172)], trans = 0},
{fin = [(N 82),(N 271)], trans = 0},
{fin = [(N 80),(N 271)], trans = 37},
{fin = [(N 207)], trans = 0},
{fin = [(N 201)], trans = 0},
{fin = [(N 229),(N 243),(N 271)], trans = 40},
{fin = [(N 229)], trans = 41},
{fin = [(N 229)], trans = 0},
{fin = [(N 229),(N 243)], trans = 41},
{fin = [], trans = 44},
{fin = [(N 243)], trans = 45},
{fin = [(N 243)], trans = 0},
{fin = [], trans = 47},
{fin = [(N 229),(N 243)], trans = 40},
{fin = [], trans = 49},
{fin = [(N 243)], trans = 50},
{fin = [(N 229),(N 243),(N 271)], trans = 51},
{fin = [], trans = 52},
{fin = [(N 223)], trans = 53},
{fin = [(N 223)], trans = 54},
{fin = [(N 223)], trans = 0},
{fin = [(N 243)], trans = 56},
{fin = [(N 216),(N 243)], trans = 57},
{fin = [(N 216)], trans = 58},
{fin = [(N 216)], trans = 0},
{fin = [(N 216),(N 243)], trans = 58},
{fin = [(N 123),(N 271)], trans = 61},
{fin = [(N 162)], trans = 0},
{fin = [(N 33)], trans = 0},
{fin = [(N 21)], trans = 0},
{fin = [(N 13)], trans = 0},
{fin = [(N 96),(N 271)], trans = 66},
{fin = [(N 243)], trans = 67},
{fin = [(N 204)], trans = 68},
{fin = [(N 100)], trans = 0},
{fin = [(N 112),(N 271)], trans = 70},
{fin = [(N 121)], trans = 0},
{fin = [(N 150)], trans = 0},
{fin = [(N 118)], trans = 0},
{fin = [(N 102),(N 271)], trans = 0},
{fin = [(N 110),(N 271)], trans = 75},
{fin = [(N 147)], trans = 0},
{fin = [(N 115)], trans = 0},
{fin = [(N 104),(N 271)], trans = 78},
{fin = [(N 159)], trans = 0},
{fin = [(N 86),(N 271)], trans = 0},
{fin = [(N 84),(N 271)], trans = 81},
{fin = [(N 198)], trans = 0},
{fin = [(N 271)], trans = 83},
{fin = [], trans = 84},
{fin = [(N 261)], trans = 0},
{fin = [], trans = 86},
{fin = [], trans = 87},
{fin = [(N 266)], trans = 0},
{fin = [], trans = 89},
{fin = [], trans = 90},
{fin = [(N 257)], trans = 0},
{fin = [], trans = 92},
{fin = [], trans = 93},
{fin = [], trans = 94},
{fin = [(N 250)], trans = 0},
{fin = [(N 250),(N 266)], trans = 0},
{fin = [(N 131),(N 271)], trans = 97},
{fin = [(N 168)], trans = 0},
{fin = [(N 189)], trans = 0},
{fin = [(N 133),(N 271)], trans = 100},
{fin = [(N 156)], trans = 0},
{fin = [(N 44),(N 271)], trans = 0},
{fin = [(N 106),(N 271)], trans = 103},
{fin = [(N 183)], trans = 0},
{fin = [(N 10),(N 271)], trans = 105},
{fin = [(N 10)], trans = 105},
{fin = [(N 7)], trans = 0},
{fin = [(N 271)], trans = 108},
{fin = [], trans = 108},
{fin = [(N 5)], trans = 0},
{fin = [(N 10),(N 271)], trans = 111},
{fin = [(N 10)], trans = 111},
{fin = [(N 42)], trans = 0},
{fin = [(N 40),(N 42)], trans = 114},
{fin = [(N 40)], trans = 0},
{fin = [(N 40)], trans = 116},
{fin = [(N 18)], trans = 0},
{fin = [(N 18)], trans = 118},
{fin = [(N 16)], trans = 0},
{fin = [(N 10),(N 18)], trans = 105},
{fin = [(N 18)], trans = 108},
{fin = [(N 10),(N 18)], trans = 111},
{fin = [(N 55)], trans = 123},
{fin = [], trans = 124},
{fin = [(N 78)], trans = 0},
{fin = [(N 78)], trans = 126},
{fin = [(N 71)], trans = 126},
{fin = [(N 78)], trans = 128},
{fin = [(N 75)], trans = 0},
{fin = [(N 78)], trans = 130},
{fin = [], trans = 131},
{fin = [(N 66)], trans = 0},
{fin = [(N 61),(N 78)], trans = 130},
{fin = [(N 58)], trans = 0},
{fin = [(N 51)], trans = 135},
{fin = [(N 49)], trans = 0},
{fin = [], trans = 135},
{fin = [(N 53)], trans = 0},
{fin = [(N 30)], trans = 0},
{fin = [(N 28),(N 30)], trans = 140},
{fin = [(N 28)], trans = 0},
{fin = [(N 28)], trans = 142}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val C = STARTSTATE 5;
val CC = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val PC = STARTSTATE 9;
val S = STARTSTATE 7;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as ({comLevel,errWarn,sourceMap,charlist,stringstart})) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => (continue())
| 100 => (Tokens.ELIPSIS(yypos,yypos+3))
| 102 => (Tokens.COMMA(yypos,yypos+1))
| 104 => (Tokens.TIMES(yypos,yypos+1))
| 106 => (Tokens.BANG(yypos,yypos+1))
| 108 => (Tokens.HAT(yypos,yypos+1))
| 110 => (Tokens.PLUS(yypos,yypos+1))
| 112 => (Tokens.MINUS(yypos,yypos+1))
| 115 => (Tokens.INC(yypos,yypos+2))
| 118 => (Tokens.DEC(yypos,yypos+2))
| 121 => (Tokens.ARROW(yypos,yypos+1))
| 123 => (Tokens.DIVIDE(yypos,yypos+1))
| 125 => (Tokens.TILDE(yypos,yypos+1))
| 127 => (Tokens.QUESTION(yypos,yypos+1))
| 129 => (Tokens.BAR(yypos,yypos+1))
| 13 => (YYBEGIN C; continue())
| 131 => (Tokens.AMP(yypos,yypos+1))
| 133 => (Tokens.PERCENT(yypos,yypos+1))
| 136 => (Tokens.LTE(yypos,yypos+2))
| 139 => (Tokens.GTE(yypos,yypos+2))
| 142 => (Tokens.EQ(yypos,yypos+2))
| 144 => (Tokens.EQUALS(yypos,yypos+1))
| 147 => (Tokens.PLUSEQUALS(yypos,yypos+2))
| 150 => (Tokens.MINUSEQUALS(yypos,yypos+2))
| 153 => (Tokens.XOREQUALS(yypos,yypos+2))
| 156 => (Tokens.MODEQUALS(yypos,yypos+2))
| 159 => (Tokens.TIMESEQUALS(yypos,yypos+2))
| 16 => (YYBEGIN INITIAL; continue())
| 162 => (Tokens.DIVEQUALS(yypos,yypos+2))
| 165 => (Tokens.OREQUALS(yypos,yypos+2))
| 168 => (Tokens.ANDEQUALS(yypos,yypos+2))
| 172 => (Tokens.LSHIFTEQUALS(yypos,yypos+3))
| 176 => (Tokens.RSHIFTEQUALS(yypos,yypos+3))
| 178 => (Tokens.LT(yypos,yypos+1))
| 18 => (continue())
| 180 => (Tokens.GT(yypos,yypos+1))
| 183 => (Tokens.NEQ(yypos,yypos+2))
| 186 => (Tokens.OR(yypos,yypos+2))
| 189 => (Tokens.AND(yypos,yypos+2))
| 192 => (Tokens.LSHIFT(yypos,yypos+2))
| 195 => (Tokens.RSHIFT(yypos,yypos+2))
| 198 => (Tokens.LCOLON(yypos,yypos+2)  (* PADS *))
| 201 => (Tokens.RCOLON(yypos,yypos+2))
| 204 => (Tokens.DOTDOT(yypos,yypos+2))
| 207 => (Tokens.COLONCOLON(yypos,yypos+2))
| 21 => (charlist := [""]; stringstart := yypos; YYBEGIN PC; continue())
| 210 => (Tokens.EQGT(yypos,yypos+2))
| 216 => let val yytext=yymktext() in Tokens.DECNUM(mkOctInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)) end
| 223 => let val yytext=yymktext() in Tokens.DECNUM(mkHexInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)) end
| 229 => let val yytext=yymktext() in Tokens.DECNUM(mkInt (yytext,yypos,yypos+size(yytext),errWarn), yypos,yypos+size(yytext)) end
| 243 => let val yytext=yymktext() in Tokens.REALNUM(mkRealNum(yytext,yypos,yypos+size(yytext),errWarn), yypos, yypos
+ size(yytext)) end
| 250 => let val yytext=yymktext() in let val s = substring(yytext, 2, size(yytext)-3)
				     in Tokens.CCONST(IntInf.fromInt (mkOctChar(s,yypos,yypos+size(yytext),errWarn)),
						      yypos,
					      yypos+size(yytext))
	                             end end
| 257 => let val yytext=yymktext() in let val s = substring(yytext, 3, size(yytext)-4)
				     in Tokens.CCONST(IntInf.fromInt (mkHexChar(s,yypos,yypos+size(yytext),errWarn)),
						      yypos,
						      yypos+size(yytext))
	                             end end
| 261 => let val yytext=yymktext() in let val cval = ordof(yytext,1)
	                            in Tokens.CCONST(IntInf.fromInt cval,yypos,yypos+size(yytext))
                                    end end
| 266 => let val yytext=yymktext() in Tokens.CCONST(IntInf.fromInt(special_char(substring(yytext,1,size(yytext)-2),yypos,yypos+size(yytext),errWarn)), yypos, yypos+size(yytext)) end
| 269 => let val yytext=yymktext() in TTokTable.checkToken(yytext,yypos) end
| 271 => (continue())
| 28 => (YYBEGIN INITIAL; 
                            SourceMap.newline sourceMap yypos;
                            Tokens.PCOMMENT(makeString charlist, !stringstart, yypos))
| 30 => let val yytext=yymktext() in addString(charlist,yytext); continue() end
| 33 => (YYBEGIN CC; continue())
| 40 => (YYBEGIN INITIAL; 
                    SourceMap.newline sourceMap yypos; continue())
| 42 => (continue())
| 44 => (charlist := [""]; stringstart := yypos; YYBEGIN S; continue())
| 49 => (continue())
| 5 => let val yytext=yymktext() in SourceMap.parseDirective sourceMap 
                         (yypos,yytext); continue() end
| 51 => (YYBEGIN INITIAL;Tokens.STRING(makeString charlist,!stringstart,yypos+1))
| 53 => ((#err errWarn) (!stringstart,yypos,"unclosed string");
		    SourceMap.newline sourceMap yypos;
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos))
| 55 => let val yytext=yymktext() in addString(charlist,yytext); continue() end
| 58 => (SourceMap.newline sourceMap yypos; continue())
| 61 => (addString(charlist,chr 0);continue())
| 66 => let val yytext=yymktext() in addString(charlist, chr(mkOctChar(substring(yytext, 1, size(yytext)-1), yypos, yypos+size(yytext), errWarn))); continue() end
| 7 => (SourceMap.newline sourceMap yypos; continue())
| 71 => let val yytext=yymktext() in addString(charlist, chr(mkHexChar(substring(yytext, 2, size(yytext)-2), yypos, yypos+size(yytext), errWarn))); continue() end
| 75 => let val yytext=yymktext() in addString(charlist,chr(ordof(yytext,2)-ord("@"))); continue() end
| 78 => let val yytext=yymktext() in addString(charlist, chr(special_char(yytext, yypos, yypos+size(yytext), errWarn))); continue() end
| 80 => (Tokens.COLON(yypos,yypos+1))
| 82 => (Tokens.SEMICOLON(yypos,yypos+1))
| 84 => (Tokens.LPAREN(yypos,yypos+1))
| 86 => (Tokens.RPAREN(yypos,yypos+1))
| 88 => (Tokens.LBRACE(yypos,yypos+1))
| 90 => (Tokens.RBRACE(yypos,yypos+1))
| 92 => (Tokens.LCURLY(yypos,yypos+1))
| 94 => (Tokens.RCURLY(yypos,yypos+1))
| 96 => (Tokens.DOT(yypos,yypos+1))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
	in scan(start,nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
