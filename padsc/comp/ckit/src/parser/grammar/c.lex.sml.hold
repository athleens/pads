functor CLexFun(structure Tokens : C_TOKENS 
			 structure TokTable : TOKENTABLE 
			 sharing TokTable.Tokens = Tokens)=
   struct
    structure UserDeclarations =
      struct
(* Copyright (c) 1998 by Lucent Technologies *)

(*
 * The following replacement for c.lex should give correct (ANSI)
 * In particular, we don't allow
 * 
 * char *t = "abd
 * lkj";
 * 
 * GCC accepts this, but SGI cc does not. This program is not ANSI
 * compliant.
 *)

type svalue = Tokens.svalue
type pos = int
type lexresult = (svalue,pos) Tokens.token
type errWarn = {err: pos*pos*string->unit, warn: pos*pos*string->unit}
type lexarg =  {comLevel : int ref, 
                sourceMap : SourceMap.sourcemap,
		charlist : string list ref,
		stringstart : int ref,  (* start of current string or comment*)
	        errWarn: errWarn}

type arg = lexarg
type ('a,'b) token = ('a,'b) Tokens.token

fun ordof (s, i) = Char.ord (String.sub (s, i))
fun dec (iRef : int ref) = iRef := (!iRef) - 1
fun inc (iRef : int ref) = iRef := (!iRef) + 1
fun chr i = String.str(Char.chr i)
fun ord s = Char.ord(String.sub(s, 0))
fun explode s = CharVector.foldr (fn (c, l) => str c :: l) [] s
fun implode strList = String.concat strList
fun hd [] = (print "c.lex: hd of empty\n";
	     raise Empty)
  | hd (h :: l)	= h

val eof = fn ({comLevel,errWarn,sourceMap,stringstart,charlist}:lexarg) => 
	   let val pos = Int.max(!stringstart+2, SourceMap.currPos sourceMap)
	    in if !comLevel>0 then (#err errWarn) (!stringstart,pos, "unclosed comment" )
		  	      else ();
	       Tokens.EOF(pos,pos)
	   end	
fun addString (charlist,s:string) = charlist := s :: (!charlist)
fun makeString charlist = (implode(rev(!charlist)) before charlist := nil)

fun mkHexInt (s,a,b,errWarn:errWarn)=((case (StringCvt.scanString (IntInf.scan StringCvt.HEX) (String.extract(s,2,NONE))) of
		  SOME i =>  i
		| _ => ((#err errWarn)(a,b,"trouble in parsing int");IntInf.fromInt(0)))
			handle OverFlow => ((#err errWarn)(a,b,"large int const");IntInf.fromInt(0)))

fun mkHexChar (args as (s, a, b, errWarn:errWarn)) : int (* returns a character sized integer *) = 
	let val i = mkHexInt args
            val i = (IntInf.toInt i) 
                    handle OverFlow => ((#err errWarn)(a,b,"large int const");0)
	in
	  if (i>255) then 
	    ((#warn errWarn) (a,b,"overflow in hexadecimal escape sequence");
	    (i mod 256))
	  else
       	    i
        end	

fun mkOctInt (s,a,b,errWarn:errWarn)
	= ((case (StringCvt.scanString (IntInf.scan StringCvt.OCT) s) of
		  SOME i => i
		| _ => ((#err errWarn)(a,b,"trouble in parsing int");IntInf.fromInt(0)))
			handle OverFlow => ((#err errWarn)(a,b,"large int const");IntInf.fromInt(0)))


fun mkOctChar (args as (s, a, b, errWarn:errWarn)) (* returns a character sized integer *) = 
	let val i = mkOctInt args
            val i = (IntInf.toInt i) 
                    handle OverFlow => ((#err errWarn)(a,b,"large int const");0)
	in
	  if (i>255) then 
	    ((#warn errWarn) (a,b,"overflow in octal escape sequence");
	    (i mod 256))
	  else
       	     i
        end	

fun mkInt (s,a,b,errWarn:errWarn) = ((case (StringCvt.scanString (IntInf.scan StringCvt.DEC) s) of
		  SOME i => i
		| _ => ((#err errWarn)(a,b,"trouble in parsing int");IntInf.fromInt(0)))
			handle OverFlow => ((#err errWarn)(a,b,"large int const");IntInf.fromInt(0)))

fun mkRealNum (s,a,b,errWarn:errWarn) = ((case (StringCvt.scanString Real.scan s) of
		   SOME r => r
		 | _ => ((#err errWarn)(a,b,"trouble in parsing real");0.0))
			handle OverFlow => ((#err errWarn)(a,b,"large real const"); 0.0))

val backslasha = 7

fun special_char(c,fst,last,errWarn:errWarn) =
		(case c of
			"\\a" => 7
		      | "\\b" => 8
		      | "\\f" => 12
		      | "\\n" => 10
		      | "\\r" => 13
		      | "\\t" => 9
		      | "\\v" => 11
	              | _ => ordof(c,1)
	                      (* strictly speaking, should only handle
                                \?, \\, \", \', but it is common
                                to simply ignore slash, and just use next char *)
		)


(* Notes on lexer states:
   INITIAL -- predefined start state and the default token state
   S -- inside a string (entered from INTITAL with ")
   C -- inside a comment (entered from INITIAL with /* )
   PDIR -- inside a directive to include in output code
   CC -- inside a C++ style comment
   PC -- inside a pads comment
 *)


end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\013\013\013\013\013\013\013\013\013\118\120\013\118\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\118\116\115\013\013\113\110\096\094\093\091\088\087\083\079\074\
\\064\053\053\053\053\053\053\053\053\053\050\049\044\041\037\036\
\\013\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\026\020\020\020\020\020\020\020\020\020\020\025\013\024\022\020\
\\013\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\019\016\015\014\013\
\\013"
),
 (2, 
"\013\013\013\013\013\013\013\013\013\124\120\013\124\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\124\116\115\121\013\113\110\096\094\093\091\088\087\083\079\074\
\\064\053\053\053\053\053\053\053\053\053\050\049\044\041\037\036\
\\013\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\026\020\020\020\020\020\020\020\020\020\020\025\013\024\022\020\
\\013\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\019\016\015\014\013\
\\013"
),
 (3, 
"\126\126\126\126\126\126\126\126\126\126\129\126\126\127\126\126\
\\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\
\\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\
\\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\
\\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\
\\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\
\\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\
\\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\
\\126"
),
 (5, 
"\130\130\130\130\130\130\130\130\130\133\120\130\133\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\133\130\130\130\130\130\130\130\130\130\131\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130"
),
 (6, 
"\130\130\130\130\130\130\130\130\130\135\120\130\135\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\135\130\130\134\130\130\130\130\130\130\131\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\130"
),
 (7, 
"\136\136\136\136\136\136\136\136\136\136\151\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\148\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\137\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136"
),
 (9, 
"\152\152\152\152\152\152\152\152\152\152\155\152\152\153\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152"
),
 (11, 
"\156\156\156\156\156\156\156\156\156\156\000\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\157\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\021\021\021\021\021\027\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\028\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\029\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\021\021\021\021\021\021\021\021\030\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\031\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\032\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\021\033\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\021\
\\000\021\021\021\021\021\021\021\021\021\021\021\021\021\021\021\
\\021\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\040\038\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\043\042\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\047\045\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\051\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\\061\061\061\061\061\061\061\061\061\061\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\056\000\000\000\
\\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\056\000\000\000\
\\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\060\000\060\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\\070\070\070\070\070\070\070\070\069\069\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\056\000\000\000\
\\000\000\000\000\000\054\000\000\065\000\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\056\000\000\000\
\\000\000\000\000\000\054\000\000\065\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\066\066\066\066\066\066\066\066\066\066\000\000\000\000\000\000\
\\000\066\066\066\066\066\066\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\066\066\066\066\066\066\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\066\066\066\066\066\066\066\066\066\066\000\000\000\000\000\000\
\\000\066\066\066\066\066\066\000\000\000\000\000\067\000\000\000\
\\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\000\
\\000\066\066\066\066\066\066\000\000\000\000\000\067\000\000\000\
\\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\\069\069\069\069\069\069\069\069\069\069\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\\070\070\070\070\070\070\070\070\069\069\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\073\000\000\000\
\\000\000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\073\000\000\000\
\\000\000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
\\000\000\000\000\000\072\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
\\000\000\000\000\000\072\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\078\000\000\077\000\076\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\057\000\000\000\000\000\000\059\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (83, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\085\084\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (88, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\090\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (91, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\092\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (94, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\095\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (96, 
"\097\097\097\097\097\097\097\097\097\097\000\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\099\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097"
),
 (97, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\098\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (99, 
"\100\100\100\100\100\100\100\100\100\100\000\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\105\105\105\105\105\105\105\105\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\102\100\100\100\100\100\100\100\
\\100"
),
 (100, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\101\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (102, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\101\000\000\000\000\000\000\000\000\
\\103\103\103\103\103\103\103\103\103\103\000\000\000\000\000\000\
\\000\103\103\103\103\103\103\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\103\103\103\103\103\103\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (103, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\104\000\000\000\000\000\000\000\000\
\\103\103\103\103\103\103\103\103\103\103\000\000\000\000\000\000\
\\000\103\103\103\103\103\103\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\103\103\103\103\103\103\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (105, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\109\000\000\000\000\000\000\000\000\
\\106\106\106\106\106\106\106\106\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (106, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\108\000\000\000\000\000\000\000\000\
\\107\107\107\107\107\107\107\107\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (107, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\108\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (110, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\111\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (113, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\114\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (116, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\117\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (118, 
"\000\000\000\000\000\000\000\000\000\119\000\000\119\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\119\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (121, 
"\122\122\122\122\122\122\122\122\122\122\123\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122"
),
 (124, 
"\000\000\000\000\000\000\000\000\000\125\000\000\125\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\125\000\000\122\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (127, 
"\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (129, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (131, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (136, 
"\136\136\136\136\136\136\136\136\136\136\000\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\000\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\000\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136"
),
 (137, 
"\138\138\138\138\138\138\138\138\138\138\147\138\138\138\138\138\
\\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\
\\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\
\\146\143\143\143\143\143\143\143\138\138\138\138\138\138\138\138\
\\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\
\\138\138\138\138\138\138\138\138\138\138\138\138\138\138\141\138\
\\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\138\
\\138\138\138\138\138\138\138\138\139\138\138\138\138\138\138\138\
\\138"
),
 (139, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\140\140\140\140\140\140\140\140\140\140\000\000\000\000\000\000\
\\000\140\140\140\140\140\140\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\140\140\140\140\140\140\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (141, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (143, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\144\144\144\144\144\144\144\144\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (144, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\145\145\145\145\145\145\145\145\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (148, 
"\000\000\000\000\000\000\000\000\000\150\000\000\150\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\150\000\149\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (153, 
"\000\000\000\000\000\000\000\000\000\000\154\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (155, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\154\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (157, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\158\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [(N 10)], trans = 1},
{fin = [(N 10)], trans = 2},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [(N 10)], trans = 5},
{fin = [(N 10)], trans = 6},
{fin = [(N 71)], trans = 7},
{fin = [(N 71)], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [], trans = 11},
{fin = [], trans = 11},
{fin = [(N 291)], trans = 0},
{fin = [(N 141),(N 291)], trans = 0},
{fin = [(N 110),(N 291)], trans = 0},
{fin = [(N 145),(N 291)], trans = 16},
{fin = [(N 202)], trans = 0},
{fin = [(N 181)], trans = 0},
{fin = [(N 108),(N 291)], trans = 0},
{fin = [(N 289),(N 291)], trans = 20},
{fin = [(N 289)], trans = 20},
{fin = [(N 124),(N 291)], trans = 22},
{fin = [(N 169)], trans = 0},
{fin = [(N 106),(N 291)], trans = 0},
{fin = [(N 104),(N 291)], trans = 0},
{fin = [(N 289),(N 291)], trans = 26},
{fin = [(N 289)], trans = 27},
{fin = [(N 289)], trans = 28},
{fin = [(N 289)], trans = 29},
{fin = [(N 289)], trans = 30},
{fin = [(N 289)], trans = 31},
{fin = [(N 289)], trans = 32},
{fin = [(N 289)], trans = 33},
{fin = [], trans = 34},
{fin = [(N 41)], trans = 0},
{fin = [(N 143),(N 291)], trans = 0},
{fin = [(N 196),(N 291)], trans = 37},
{fin = [(N 211)], trans = 38},
{fin = [(N 192)], trans = 0},
{fin = [(N 155)], trans = 0},
{fin = [(N 160),(N 291)], trans = 41},
{fin = [(N 226)], trans = 0},
{fin = [(N 158)], trans = 0},
{fin = [(N 194),(N 291)], trans = 44},
{fin = [(N 152)], trans = 45},
{fin = [(N 230)], trans = 0},
{fin = [(N 208)], trans = 47},
{fin = [(N 188)], trans = 0},
{fin = [(N 98),(N 291)], trans = 0},
{fin = [(N 96),(N 291)], trans = 50},
{fin = [(N 223)], trans = 0},
{fin = [(N 217)], trans = 0},
{fin = [(N 249),(N 263),(N 291)], trans = 53},
{fin = [(N 249)], trans = 54},
{fin = [(N 249)], trans = 0},
{fin = [(N 249),(N 263)], trans = 54},
{fin = [], trans = 57},
{fin = [(N 263)], trans = 58},
{fin = [(N 263)], trans = 0},
{fin = [], trans = 60},
{fin = [(N 249),(N 263)], trans = 53},
{fin = [], trans = 62},
{fin = [(N 263)], trans = 63},
{fin = [(N 249),(N 263),(N 291)], trans = 64},
{fin = [], trans = 65},
{fin = [(N 243)], trans = 66},
{fin = [(N 243)], trans = 67},
{fin = [(N 243)], trans = 0},
{fin = [(N 263)], trans = 69},
{fin = [(N 236),(N 263)], trans = 70},
{fin = [(N 236)], trans = 71},
{fin = [(N 236)], trans = 0},
{fin = [(N 236),(N 263)], trans = 71},
{fin = [(N 139),(N 291)], trans = 74},
{fin = [(N 178)], trans = 0},
{fin = [(N 49)], trans = 0},
{fin = [(N 21)], trans = 0},
{fin = [(N 13)], trans = 0},
{fin = [(N 112),(N 291)], trans = 79},
{fin = [(N 263)], trans = 80},
{fin = [(N 220)], trans = 81},
{fin = [(N 116)], trans = 0},
{fin = [(N 128),(N 291)], trans = 83},
{fin = [(N 137)], trans = 0},
{fin = [(N 166)], trans = 0},
{fin = [(N 134)], trans = 0},
{fin = [(N 118),(N 291)], trans = 0},
{fin = [(N 126),(N 291)], trans = 88},
{fin = [(N 163)], trans = 0},
{fin = [(N 131)], trans = 0},
{fin = [(N 120),(N 291)], trans = 91},
{fin = [(N 175)], trans = 0},
{fin = [(N 102),(N 291)], trans = 0},
{fin = [(N 100),(N 291)], trans = 94},
{fin = [(N 214)], trans = 0},
{fin = [(N 291)], trans = 96},
{fin = [], trans = 97},
{fin = [(N 281)], trans = 0},
{fin = [], trans = 99},
{fin = [], trans = 100},
{fin = [(N 286)], trans = 0},
{fin = [], trans = 102},
{fin = [], trans = 103},
{fin = [(N 277)], trans = 0},
{fin = [], trans = 105},
{fin = [], trans = 106},
{fin = [], trans = 107},
{fin = [(N 270)], trans = 0},
{fin = [(N 270),(N 286)], trans = 0},
{fin = [(N 147),(N 291)], trans = 110},
{fin = [(N 184)], trans = 0},
{fin = [(N 205)], trans = 0},
{fin = [(N 149),(N 291)], trans = 113},
{fin = [(N 172)], trans = 0},
{fin = [(N 60),(N 291)], trans = 0},
{fin = [(N 122),(N 291)], trans = 116},
{fin = [(N 199)], trans = 0},
{fin = [(N 10),(N 291)], trans = 118},
{fin = [(N 10)], trans = 118},
{fin = [(N 7)], trans = 0},
{fin = [(N 291)], trans = 121},
{fin = [], trans = 121},
{fin = [(N 5)], trans = 0},
{fin = [(N 10),(N 291)], trans = 124},
{fin = [(N 10)], trans = 124},
{fin = [(N 58)], trans = 0},
{fin = [(N 56),(N 58)], trans = 127},
{fin = [(N 56)], trans = 0},
{fin = [(N 56)], trans = 129},
{fin = [(N 18)], trans = 0},
{fin = [(N 18)], trans = 131},
{fin = [(N 16)], trans = 0},
{fin = [(N 10),(N 18)], trans = 118},
{fin = [(N 18)], trans = 121},
{fin = [(N 10),(N 18)], trans = 124},
{fin = [(N 71)], trans = 136},
{fin = [], trans = 137},
{fin = [(N 94)], trans = 0},
{fin = [(N 94)], trans = 139},
{fin = [(N 87)], trans = 139},
{fin = [(N 94)], trans = 141},
{fin = [(N 91)], trans = 0},
{fin = [(N 94)], trans = 143},
{fin = [], trans = 144},
{fin = [(N 82)], trans = 0},
{fin = [(N 77),(N 94)], trans = 143},
{fin = [(N 74)], trans = 0},
{fin = [(N 67)], trans = 148},
{fin = [(N 65)], trans = 0},
{fin = [], trans = 148},
{fin = [(N 69)], trans = 0},
{fin = [(N 30)], trans = 0},
{fin = [(N 28),(N 30)], trans = 153},
{fin = [(N 28)], trans = 0},
{fin = [(N 28)], trans = 155},
{fin = [(N 46)], trans = 0},
{fin = [(N 46)], trans = 157},
{fin = [(N 44)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val C = STARTSTATE 5;
val CC = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val PC = STARTSTATE 9;
val PDIR = STARTSTATE 11;
val S = STARTSTATE 7;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as ({comLevel,errWarn,sourceMap,charlist,stringstart})) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => (continue())
| 100 => (Tokens.LPAREN(yypos,yypos+1))
| 102 => (Tokens.RPAREN(yypos,yypos+1))
| 104 => (Tokens.LBRACE(yypos,yypos+1))
| 106 => (Tokens.RBRACE(yypos,yypos+1))
| 108 => (Tokens.LCURLY(yypos,yypos+1))
| 110 => (Tokens.RCURLY(yypos,yypos+1))
| 112 => (Tokens.DOT(yypos,yypos+1))
| 116 => (Tokens.ELIPSIS(yypos,yypos+3))
| 118 => (Tokens.COMMA(yypos,yypos+1))
| 120 => (Tokens.TIMES(yypos,yypos+1))
| 122 => (Tokens.BANG(yypos,yypos+1))
| 124 => (Tokens.HAT(yypos,yypos+1))
| 126 => (Tokens.PLUS(yypos,yypos+1))
| 128 => (Tokens.MINUS(yypos,yypos+1))
| 13 => (YYBEGIN C; continue())
| 131 => (Tokens.INC(yypos,yypos+2))
| 134 => (Tokens.DEC(yypos,yypos+2))
| 137 => (Tokens.ARROW(yypos,yypos+1))
| 139 => (Tokens.DIVIDE(yypos,yypos+1))
| 141 => (Tokens.TILDE(yypos,yypos+1))
| 143 => (Tokens.QUESTION(yypos,yypos+1))
| 145 => (Tokens.BAR(yypos,yypos+1))
| 147 => (Tokens.AMP(yypos,yypos+1))
| 149 => (Tokens.PERCENT(yypos,yypos+1))
| 152 => (Tokens.LTE(yypos,yypos+2))
| 155 => (Tokens.GTE(yypos,yypos+2))
| 158 => (Tokens.EQ(yypos,yypos+2))
| 16 => (YYBEGIN INITIAL; continue())
| 160 => (Tokens.EQUALS(yypos,yypos+1))
| 163 => (Tokens.PLUSEQUALS(yypos,yypos+2))
| 166 => (Tokens.MINUSEQUALS(yypos,yypos+2))
| 169 => (Tokens.XOREQUALS(yypos,yypos+2))
| 172 => (Tokens.MODEQUALS(yypos,yypos+2))
| 175 => (Tokens.TIMESEQUALS(yypos,yypos+2))
| 178 => (Tokens.DIVEQUALS(yypos,yypos+2))
| 18 => (continue())
| 181 => (Tokens.OREQUALS(yypos,yypos+2))
| 184 => (Tokens.ANDEQUALS(yypos,yypos+2))
| 188 => (Tokens.LSHIFTEQUALS(yypos,yypos+3))
| 192 => (Tokens.RSHIFTEQUALS(yypos,yypos+3))
| 194 => (Tokens.LT(yypos,yypos+1))
| 196 => (Tokens.GT(yypos,yypos+1))
| 199 => (Tokens.NEQ(yypos,yypos+2))
| 202 => (Tokens.OR(yypos,yypos+2))
| 205 => (Tokens.AND(yypos,yypos+2))
| 208 => (Tokens.LSHIFT(yypos,yypos+2))
| 21 => (charlist := [""]; stringstart := yypos; YYBEGIN PC; continue())
| 211 => (Tokens.RSHIFT(yypos,yypos+2))
| 214 => (Tokens.LCOLON(yypos,yypos+2)  (* PADS *))
| 217 => (Tokens.RCOLON(yypos,yypos+2))
| 220 => (Tokens.DOTDOT(yypos,yypos+2))
| 223 => (Tokens.COLONCOLON(yypos,yypos+2))
| 226 => (Tokens.EQGT(yypos,yypos+2))
| 230 => (Tokens.PLTEQGT(yypos,yypos+3))
| 236 => let val yytext=yymktext() in Tokens.DECNUM(mkOctInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)) end
| 243 => let val yytext=yymktext() in Tokens.DECNUM(mkHexInt(yytext,yypos,yypos+size(yytext),errWarn),yypos, yypos+size(yytext)) end
| 249 => let val yytext=yymktext() in Tokens.DECNUM(mkInt (yytext,yypos,yypos+size(yytext),errWarn), yypos,yypos+size(yytext)) end
| 263 => let val yytext=yymktext() in Tokens.REALNUM(mkRealNum(yytext,yypos,yypos+size(yytext),errWarn), yypos, yypos
+ size(yytext)) end
| 270 => let val yytext=yymktext() in let val s = substring(yytext, 2, size(yytext)-3)
				     in Tokens.CCONST(IntInf.fromInt (mkOctChar(s,yypos,yypos+size(yytext),errWarn)),
						      yypos,
					      yypos+size(yytext))
	                             end end
| 277 => let val yytext=yymktext() in let val s = substring(yytext, 3, size(yytext)-4)
				     in Tokens.CCONST(IntInf.fromInt (mkHexChar(s,yypos,yypos+size(yytext),errWarn)),
						      yypos,
						      yypos+size(yytext))
	                             end end
| 28 => (YYBEGIN INITIAL; 
                            SourceMap.newline sourceMap yypos;
                            Tokens.PCOMMENT(makeString charlist, !stringstart, yypos))
| 281 => let val yytext=yymktext() in let val cval = ordof(yytext,1)
	                            in Tokens.CCONST(IntInf.fromInt cval,yypos,yypos+size(yytext))
                                    end end
| 286 => let val yytext=yymktext() in Tokens.CCONST(IntInf.fromInt(special_char(substring(yytext,1,size(yytext)-2),yypos,yypos+size(yytext),errWarn)), yypos, yypos+size(yytext)) end
| 289 => let val yytext=yymktext() in TokTable.checkToken(yytext,yypos) end
| 291 => (continue())
| 30 => let val yytext=yymktext() in addString(charlist,yytext); continue() end
| 41 => (charlist := [""]; stringstart := yypos; YYBEGIN PDIR; continue())
| 44 => (YYBEGIN INITIAL; 
                            SourceMap.newline sourceMap yypos;
                            Tokens.PINCLUDE(makeString charlist, !stringstart, yypos))
| 46 => let val yytext=yymktext() in addString(charlist,yytext); continue() end
| 49 => (YYBEGIN CC; continue())
| 5 => let val yytext=yymktext() in SourceMap.parseDirective sourceMap 
                         (yypos,yytext); continue() end
| 56 => (YYBEGIN INITIAL; 
                    SourceMap.newline sourceMap yypos; continue())
| 58 => (continue())
| 60 => (charlist := [""]; stringstart := yypos; YYBEGIN S; continue())
| 65 => (continue())
| 67 => (YYBEGIN INITIAL;Tokens.STRING(makeString charlist,!stringstart,yypos+1))
| 69 => ((#err errWarn) (!stringstart,yypos,"unclosed string");
		    SourceMap.newline sourceMap yypos;
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos))
| 7 => (SourceMap.newline sourceMap yypos; continue())
| 71 => let val yytext=yymktext() in addString(charlist,yytext); continue() end
| 74 => (SourceMap.newline sourceMap yypos; continue())
| 77 => (addString(charlist,chr 0);continue())
| 82 => let val yytext=yymktext() in addString(charlist, chr(mkOctChar(substring(yytext, 1, size(yytext)-1), yypos, yypos+size(yytext), errWarn))); continue() end
| 87 => let val yytext=yymktext() in addString(charlist, chr(mkHexChar(substring(yytext, 2, size(yytext)-2), yypos, yypos+size(yytext), errWarn))); continue() end
| 91 => let val yytext=yymktext() in addString(charlist,chr(ordof(yytext,2)-ord("@"))); continue() end
| 94 => let val yytext=yymktext() in addString(charlist, chr(special_char(yytext, yypos, yypos+size(yytext), errWarn))); continue() end
| 96 => (Tokens.COLON(yypos,yypos+1))
| 98 => (Tokens.SEMICOLON(yypos,yypos+1))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
	in scan(start,nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
