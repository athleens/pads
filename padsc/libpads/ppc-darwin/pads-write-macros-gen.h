#ifdef _USE_PROTO
#pragma prototyped
#endif
/*
 * WARNING: GENERATED FILE.  Do not edit this file, edit /Users/kfisher/pads/padsc/libpads/pads.c instead. 
 */

#ifndef __PADS_WRITE_MACROS_GEN_H__
#define __PADS_WRITE_MACROS_GEN_H__

/*
 * Macros that help implement write functions
 * 
 * Kathleen Fisher, Robert Gruber
 * AT&T Labs Research
 */

#include "pads-config.h"

/* The following macros implement fmt2buf_final, fmt2buf, and fmt2io using a write2buf call */

#define PDCI_FMT_FN_GEN(fn_pref, afn_pref, rep_ty, lookup_ty) \
ssize_t \
fn_pref ## _fmt2buf_final(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
			  Pbase_m *m, Pbase_pd *pd, rep_ty *rep) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep); \
} \
 \
ssize_t \
fn_pref ## _fmt2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
		    Pbase_m *m, Pbase_pd *pd, rep_ty *rep) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    return P_invoke_fmt_fn(fn, pads, buf, buf_len, buf_full, requested_out, delims, m, pd, rep); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep); \
} \
 \
ssize_t \
fn_pref ## _fmt2io(P_t *pads, Sfio_t *io, int *requested_out, const char *delims, \
		   Pbase_m *m, Pbase_pd *pd, rep_ty *rep) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", io, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2IO_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    ssize_t length; \
    Pbyte *buf; \
    int buf_full; \
    size_t buf_len; \
    PDCI_FMT2IO_USE_FMT2BUF_FN(PDCI_MacroArg2String(fn_pref) "_fmt2io", length=P_invoke_fmt_fn(fn, pads, buf, buf_len, &buf_full, requested_out, delims, m, pd, rep)); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2io(pads, io, pd, rep); \
} \

#define PDCI_FMT_FN_XTRA1_GEN(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty) \
ssize_t \
fn_pref ## _fmt2buf_final(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
			  Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep, x1); \
} \
 \
ssize_t \
fn_pref ## _fmt2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
		    Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    return P_invoke_fmt_fn(fn, pads, buf, buf_len, buf_full, requested_out, delims, m, pd, rep, x1); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep, x1); \
} \
 \
ssize_t \
fn_pref ## _fmt2io(P_t *pads, Sfio_t *io, int *requested_out, const char *delims, \
		   Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", io, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2IO_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    ssize_t length; \
    Pbyte *buf; \
    int buf_full; \
    size_t buf_len; \
    PDCI_FMT2IO_USE_FMT2BUF_FN(PDCI_MacroArg2String(fn_pref) "_fmt2io", length=P_invoke_fmt_fn(fn, pads, buf, buf_len, &buf_full, requested_out, delims, m, pd, rep, x1)); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2io(pads, io, pd, rep, x1); \
} \

#define PDCI_FMT_FN_XTRA1_IGNORE_GEN(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty) \
ssize_t \
fn_pref ## _fmt2buf_final(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
			  Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep); \
} \
 \
ssize_t \
fn_pref ## _fmt2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
		    Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    return P_invoke_fmt_fn(fn, pads, buf, buf_len, buf_full, requested_out, delims, m, pd, rep); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep); \
} \
 \
ssize_t \
fn_pref ## _fmt2io(P_t *pads, Sfio_t *io, int *requested_out, const char *delims, \
		   Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", io, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2IO_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    ssize_t length; \
    Pbyte *buf; \
    int buf_full; \
    size_t buf_len; \
    PDCI_FMT2IO_USE_FMT2BUF_FN(PDCI_MacroArg2String(fn_pref) "_fmt2io", length=P_invoke_fmt_fn(fn, pads, buf, buf_len, &buf_full, requested_out, delims, m, pd, rep)); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2io(pads, io, pd, rep); \
} \

#define PDCI_FMT_FN_XTRA3_GEN(fn_pref, afn_pref, rep_ty, xtra_ty1, xtra_ty2, xtra_ty3, lookup_ty) \
ssize_t \
fn_pref ## _fmt2buf_final(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
			  Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1, xtra_ty2 x2, xtra_ty3 x3) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf_final", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep, x1, x2, x3); \
} \
 \
ssize_t \
fn_pref ## _fmt2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, int *requested_out, const char *delims, \
		    Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1, xtra_ty2 x2, xtra_ty3 x3) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", buf, buf_full, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2buf", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2BUF_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    return P_invoke_fmt_fn(fn, pads, buf, buf_len, buf_full, requested_out, delims, m, pd, rep, x1, x2, x3); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2buf(pads, buf, buf_len, buf_full, pd, rep, x1, x2, x3); \
} \
 \
ssize_t \
fn_pref ## _fmt2io(P_t *pads, Sfio_t *io, int *requested_out, const char *delims, \
		   Pbase_m *m, Pbase_pd *pd, rep_ty *rep, xtra_ty1 x1, xtra_ty2 x2, xtra_ty3 x3) \
{ \
  Pfmt_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", io, requested_out, delims); \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_fmt2io", m, pd, rep); \
 \
  PDCI_STANDARD_FMT2IO_INIT(*m, requested_out); \
 \
  if ((fn = PDCI_GET_FMT_FN(pads, lookup_ty))) { \
    ssize_t length; \
    Pbyte *buf; \
    int buf_full; \
    size_t buf_len; \
    PDCI_FMT2IO_USE_FMT2BUF_FN(PDCI_MacroArg2String(fn_pref) "_fmt2io", length=P_invoke_fmt_fn(fn, pads, buf, buf_len, &buf_full, requested_out, delims, m, pd, rep, x1, x2, x3)); \
  } \
  (*requested_out) = 1; \
  return afn_pref ## _write2io(pads, io, pd, rep, x1, x2, x3); \
} \

#define PDCI_A_INT_FW_WRITE_FN_GEN(fn_pref, targ_type, wfmt, inv_type, inv_val, sfpr_macro_w) \
 \
ssize_t \
fn_pref ## _write2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
		      Pbase_pd *pd, targ_type *val, size_t width) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2buf", buf, buf_full, pd, val); \
  if (width > buf_len) { \
    (*buf_full) = 1; \
    return -1; \
  } \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, width)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  PDCI_sfstr_seek2zero(pads->tmp1); \
  sfpr_macro_w(writelen, pads->tmp1, wfmt, width, *val); \
  if (writelen != width) { \
    return -1; \
  } \
  memcpy(buf, PDCI_sfstr_use(pads->tmp1), writelen); \
  return writelen; \
} \
 \
ssize_t \
fn_pref ## _write2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, size_t width) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, width)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  PDCI_sfstr_seek2zero(pads->tmp1); \
  sfpr_macro_w(writelen, pads->tmp1, wfmt, width, *val); \
  if (writelen != width) { \
    return -1; \
  } \
  return sfwrite(io, PDCI_sfstr_use(pads->tmp1), writelen); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
			   Pbase_pd *pd, targ_type *val, const char *tag, int indent, size_t width) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, width)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  PDCI_sfstr_seek2zero(pads->tmp1); \
  sfpr_macro_w(writelen, pads->tmp1, wfmt, width, *val); \
  if (writelen != width) { \
    return -1; \
  } \
  PDCI_BASEVAL_XML_OUT2BUF(inv_type, "%s", PDCI_sfstr_use(pads->tmp1)); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, const char *tag, int indent, size_t width) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, width)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  PDCI_sfstr_seek2zero(pads->tmp1); \
  sfpr_macro_w(writelen, pads->tmp1, wfmt, width, *val); \
  if (writelen != width) { \
    return -1; \
  } \
  PDCI_BASEVAL_XML_OUT2IO(inv_type, "%s", PDCI_sfstr_use(pads->tmp1)); \
} \

#define PDCI_A_NUM_WRITE_FN_GEN(fn_pref, targ_type, fmt, inv_type, inv_val, sfpr_macro) \
 \
ssize_t \
fn_pref ## _write2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
		      Pbase_pd *pd, targ_type *val) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  PDCI_sfstr_seek2zero(pads->tmp1); \
  sfpr_macro(writelen, pads->tmp1, fmt, *val); \
  if (writelen <= 0) { \
    return -1; \
  } \
  if (writelen > buf_len) { \
    (*buf_full) = 1; \
    return -1; \
  } \
  memcpy(buf, PDCI_sfstr_use(pads->tmp1), writelen); \
  return writelen; \
} \
 \
ssize_t \
fn_pref ## _write2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  sfpr_macro(writelen, io, fmt, *val); \
  return writelen; \
} \
 \
ssize_t \
fn_pref ## _write_xml_2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
			   Pbase_pd *pd, targ_type *val, const char *tag, int indent) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  PDCI_sfstr_seek2zero(pads->tmp1); \
  sfpr_macro(writelen, pads->tmp1, fmt, *val); \
  if (writelen <= 0) { \
    return -1; \
  } \
  PDCI_BASEVAL_XML_OUT2BUF(inv_type, "%s", PDCI_sfstr_use(pads->tmp1)); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, const char *tag, int indent) \
{ \
  ssize_t       writelen; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  PDCI_sfstr_seek2zero(pads->tmp1); \
  sfpr_macro(writelen, pads->tmp1, fmt, *val); \
  if (writelen <= 0) { \
    return -1; \
  } \
  PDCI_BASEVAL_XML_OUT2IO(inv_type, "%s", PDCI_sfstr_use(pads->tmp1)); \
} \

#define PDCI_E_INT_FW_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
 \
ssize_t \
fn_pref ## _write2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
		      Pbase_pd *pd, targ_type *val, size_t width) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, width)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _FW_buf (pads, buf, buf_len, buf_full, *val, width); \
} \
 \
ssize_t \
fn_pref ## _write2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, size_t width) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, width)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _FW_io (pads, io, *val, width); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
			   Pbase_pd *pd, targ_type *val, const char *tag, int indent, size_t width) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2buf", buf, buf_full, pd, val); \
  return a_fn_pref ## _write_xml_2buf(pads, buf, buf_len, buf_full, pd, val, tag, indent, width); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, const char *tag, int indent, size_t width) \
{ \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2io", io, pd, val); \
  return a_fn_pref ## _write_xml_2io(pads, io, pd, val, tag, indent, width); \
} \

#define PDCI_E_NUM_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
 \
ssize_t \
fn_pref ## _write2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, Pbase_pd *pd, targ_type *val) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _buf (pads, buf, buf_len, buf_full, *val); \
} \
 \
ssize_t \
fn_pref ## _write2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _io (pads, io, *val); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, Pbase_pd *pd, targ_type *val, \
			   const char *tag, int indent) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2buf", buf, buf_full, pd, val); \
  return a_fn_pref ## _write_xml_2buf(pads, buf, buf_len, buf_full, pd, val, tag, indent); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, const char *tag, int indent) \
{ \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2io", io, pd, val); \
  return a_fn_pref ## _write_xml_2io(pads, io, pd, val, tag, indent); \
} \

#define PDCI_B_INT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
ssize_t \
fn_pref ## _write2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, Pbase_pd *pd, targ_type *val) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _buf (pads, buf, buf_len, buf_full, *val); \
} \
 \
ssize_t \
fn_pref ## _write2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _io (pads, io, *val); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
			   Pbase_pd *pd, targ_type *val, const char *tag, int indent) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2buf", buf, buf_full, pd, val); \
  return a_fn_pref ## _write_xml_2buf(pads, buf, buf_len, buf_full, pd, val, tag, indent); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, \
			  const char *tag, int indent) \
{ \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2io", io, pd, val); \
  return a_fn_pref ## _write_xml_2io(pads, io, pd, val, tag, indent); \
} \

#define PDCI_EBCBCDSB_INT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
ssize_t \
fn_pref ## _write2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
		      Pbase_pd *pd, targ_type *val, Puint32 num_digits_or_bytes) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, num_digits_or_bytes)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _buf (pads, buf, buf_len, buf_full, *val, num_digits_or_bytes); \
} \
 \
ssize_t \
fn_pref ## _write2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, Puint32 num_digits_or_bytes) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, num_digits_or_bytes)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val) = inv_val; \
    } \
  } \
  return num2pre ## _io (pads, io, *val, num_digits_or_bytes); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
			   Pbase_pd *pd, targ_type *val, const char *tag, int indent, Puint32 num_digits_or_bytes) \
{ \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2buf", buf, buf_full, pd, val); \
  return a_fn_pref ## _write_xml_2buf(pads, buf, buf_len, buf_full, pd, val, tag, indent); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2io(P_t *pads, Sfio_t *io, Pbase_pd *pd, targ_type *val, \
			  const char *tag, int indent, Puint32 num_digits_or_bytes) \
{ \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2io", io, pd, val); \
  return a_fn_pref ## _write_xml_2io(pads, io, pd, val, tag, indent); \
} \

#define PDCI_EBCBCDSB_FPOINT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val) \
ssize_t \
fn_pref ## _write2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
		      Pbase_pd *pd, targ_type *val, \
		      Puint32 num_digits_or_bytes, Puint32 d_exp) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, num_digits_or_bytes, d_exp)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val).num = inv_val; \
      (*val).denom = PDCI_10toThe[d_exp]; \
    } \
  } \
  if ((*val).denom != PDCI_10toThe[d_exp]) { \
    if (pads->speclev == 0) { \
      P_WARN2(pads->disc, PDCI_MacroArg2String(fn_pref) "_write2buf: val's denom (%llu) does not equal 10^d_exp (dex = %lu)", \
		(*val).denom, d_exp); \
    } \
    return -1; \
  } \
  return num2pre ## _buf (pads, buf, buf_len, buf_full, (*val).num, num_digits_or_bytes); \
} \
 \
ssize_t \
fn_pref ## _write2io(P_t *pads, Sfio_t *io, \
		     Pbase_pd *pd, targ_type *val, Puint32 num_digits_or_bytes, Puint32 d_exp) \
{ \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, num_digits_or_bytes, d_exp)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val).num = inv_val; \
      (*val).denom = PDCI_10toThe[d_exp]; \
    } \
  } \
  if ((*val).denom != PDCI_10toThe[d_exp]) { \
    if (pads->speclev == 0) { \
      P_WARN2(pads->disc, PDCI_MacroArg2String(fn_pref) "_write2io: val's denom (%llu) does not equal 10^d_exp (dex = %lu)", \
		(*val).denom, d_exp); \
    } \
    return -1; \
  } \
  return num2pre ## _io (pads, io, (*val).num, num_digits_or_bytes); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2buf(P_t *pads, Pbyte *buf, size_t buf_len, int *buf_full, \
			   Pbase_pd *pd, targ_type *val, \
			   const char *tag, int indent, \
			   Puint32 num_digits_or_bytes, Puint32 d_exp) \
{ \
  ssize_t       writelen; \
  Pfloat64      d; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_4P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2buf", buf, buf_full, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, num_digits_or_bytes, d_exp)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val).num = inv_val; \
      (*val).denom = PDCI_10toThe[d_exp]; \
    } \
  } \
  if ((*val).denom != PDCI_10toThe[d_exp]) { \
    if (pads->speclev == 0) { \
      P_WARN2(pads->disc, PDCI_MacroArg2String(fn_pref) "_write_xml_2buf: val's denom (%llu) does not equal 10^d_exp (dex = %lu)", \
	      (*val).denom, d_exp); \
    } \
    return -1; \
  } \
  d = P_FPOINT2FLOAT64(*val); \
  PDCI_BASEVAL_XML_OUT2BUF(inv_type, "%I8f", d); \
} \
 \
ssize_t \
fn_pref ## _write_xml_2io(P_t *pads, Sfio_t *io, \
			  Pbase_pd *pd, targ_type *val, const char *tag, int indent, Puint32 num_digits_or_bytes, Puint32 d_exp) \
{ \
  Pfloat64      d; \
  Pinv_val_fn   fn; \
 \
  PDCI_DISC_3P_CHECKS_RET_SSIZE( PDCI_MacroArg2String(fn_pref) "_write_xml_2io", io, pd, val); \
  if (pd->errCode != P_NO_ERR) { \
    fn = PDCI_GET_INV_VAL_FN(pads, inv_type); \
    if ((!fn || P_ERR == P_invoke_inv_val_fn(fn, pads, (void*)pd, (void*)val, num_digits_or_bytes, d_exp)) && \
	(pd->errCode != P_USER_CONSTRAINT_VIOLATION)) { \
      (*val).num = inv_val; \
      (*val).denom = PDCI_10toThe[d_exp]; \
    } \
  } \
  if ((*val).denom != PDCI_10toThe[d_exp]) { \
    if (pads->speclev == 0) { \
      P_WARN2(pads->disc, PDCI_MacroArg2String(fn_pref) "_write_xml_2io: val's denom (%llu) does not equal 10^d_exp (dex = %lu)", \
		(*val).denom, d_exp); \
    } \
    return -1; \
  } \
  d = P_FPOINT2FLOAT64(*val); \
  PDCI_BASEVAL_XML_OUT2IO(inv_type, "%I8f", d); \
} \

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_A_INT_FW > 0
#  define PDCI_A_INT_FW_WRITE_FN(fn_pref, targ_type, wfmt, inv_type, inv_val, sfpr_macro_w) \
            PDCI_A_INT_FW_WRITE_FN_GEN(fn_pref, targ_type, wfmt, inv_type, inv_val, sfpr_macro_w)
#else
#  define PDCI_A_INT_FW_WRITE_FN(fn_pref, targ_type, wfmt, inv_type, inv_val, sfpr_macro_w)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_A_INT > 0
#  define PDCI_A_INT_WRITE_FN(fn_pref, targ_type, fmt, inv_type, inv_val, sfpr_macro) \
            PDCI_A_NUM_WRITE_FN_GEN(fn_pref, targ_type, fmt, inv_type, inv_val, sfpr_macro)
#else
#  define PDCI_A_INT_WRITE_FN(fn_pref, targ_type, fmt, inv_type, inv_val, sfpr_macro)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_E_INT_FW > 0
#  define PDCI_E_INT_FW_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_E_INT_FW_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_E_INT_FW_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_E_INT > 0
#  define PDCI_E_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_E_NUM_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_E_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_B_INT > 0
#  define PDCI_B_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_B_INT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_B_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && (P_CONFIG_EBC_INT > 0 || P_CONFIG_EBC_FPOINT > 0)
#  define PDCI_EBC_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_EBCBCDSB_INT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_EBC_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && (P_CONFIG_BCD_INT > 0 || P_CONFIG_BCD_FPOINT > 0)
#  define PDCI_BCD_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_EBCBCDSB_INT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_BCD_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && (P_CONFIG_SBL_INT > 0 || P_CONFIG_SBL_FPOINT > 0)
#  define PDCI_SBL_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_EBCBCDSB_INT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_SBL_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && (P_CONFIG_SBH_INT > 0 || P_CONFIG_SBH_FPOINT > 0)
#  define PDCI_SBH_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_EBCBCDSB_INT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_SBH_INT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_EBC_FPOINT > 0
#  define PDCI_EBC_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val) \
            PDCI_EBCBCDSB_FPOINT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#else
#  define PDCI_EBC_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_BCD_FPOINT > 0
#  define PDCI_BCD_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val) \
            PDCI_EBCBCDSB_FPOINT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#else
#  define PDCI_BCD_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_SBL_FPOINT > 0
#  define PDCI_SBL_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val) \
            PDCI_EBCBCDSB_FPOINT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#else
#  define PDCI_SBL_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_SBH_FPOINT > 0
#  define PDCI_SBH_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val) \
            PDCI_EBCBCDSB_FPOINT_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#else
#  define PDCI_SBH_FPOINT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_A_FLOAT > 0
#  define PDCI_A_FLOAT_WRITE_FN(fn_pref, targ_type, fmt, inv_type, inv_val, sfpr_macro) \
            PDCI_A_NUM_WRITE_FN_GEN(fn_pref, targ_type, fmt, inv_type, inv_val, sfpr_macro)
#else
#  define PDCI_A_FLOAT_WRITE_FN(fn_pref, targ_type, fmt, inv_type, inv_val, sfpr_macro)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0 && P_CONFIG_E_FLOAT > 0
#  define PDCI_E_FLOAT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref) \
            PDCI_E_NUM_WRITE_FN_GEN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#else
#  define PDCI_E_FLOAT_WRITE_FN(fn_pref, targ_type, num2pre, inv_type, inv_val, a_fn_pref)
#endif

#if P_CONFIG_WRITE_FUNCTIONS > 0
#  define PDCI_FMT_FN(fn_pref, afn_pref, rep_ty, lookup_ty) \
            PDCI_FMT_FN_GEN(fn_pref, afn_pref, rep_ty, lookup_ty)
#  define PDCI_FMT_FN_XTRA1(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty) \
            PDCI_FMT_FN_XTRA1_GEN(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty)
#  define PDCI_FMT_FN_XTRA1_IGNORE(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty) \
            PDCI_FMT_FN_XTRA1_IGNORE_GEN(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty)
#  define PDCI_FMT_FN_XTRA3(fn_pref, afn_pref, rep_ty, xtra_ty1, xtra_ty2, xtra_ty3, lookup_ty) \
            PDCI_FMT_FN_XTRA3_GEN(fn_pref, afn_pref, rep_ty, xtra_ty1, xtra_ty2, xtra_ty3, lookup_ty)
#else
#  define PDCI_FMT_FN(fn_pref, afn_pref, rep_ty, lookup_ty)
#  define PDCI_FMT_FN_XTRA1(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty)
#  define PDCI_FMT_FN_XTRA1_IGNORE(fn_pref, afn_pref, rep_ty, xtra_ty1, lookup_ty)
#  define PDCI_FMT_FN_XTRA3(fn_pref, afn_pref, rep_ty, xtra_ty1, xtra_ty2, xtra_ty3, lookup_ty)
#endif

#endif  /*  __PADS_WRITE_MACROS_GEN_H__  */

