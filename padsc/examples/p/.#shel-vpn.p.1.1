
Pstruct repeat_t {
  "last message repeated ";
  Puint8 count;
  " time";
};

/*
Penum SysName_t {
  alivpn1, alivpn2, alivpn3, alivpn5, alivpn6, kcivpn2, kcivpn3, kcivpn4, kcivpn5, ukvpn3, alivpn 
};
*/

Ptypedef Pstring(:' ':) SysName_t;

Pstruct CSFW_t {
  " [";         Puint8          id1;
  "] Rule[";    Pstring(:' ':)  ruleName;
  "  ";         Puint8          id2;
  "] Firewall:  [";  Pip       ip1;
  ':';          Puint32         port1;
  '-';          Pip             ip2;
  ':';          Puint32         port2;
  ", proto:";   Pstring(:']':)  protocol;
  "], action: "; Pstring(:'\\':) action;
  "\\n";
};

Penum ISAKMP_tag_t{
  NoProposal    Pfrom("No proposal chosen"), 
  ClientVersion Pfrom("Client Version Information"),
  invalid_id    Pfrom("invalid id"),
  Invalid_ID    Pfrom("Invalid ID information")
};

Pstruct ISAKMP_message_t{
  " in message from ";
  Pip msgSource;
};

Pstruct ISAKMP_client_t{
  ": ";   Pstring_SE(:"/ \\d/":) clientName;
  ' ';    Puint32[] version : Psep('.') && Pterm(' ');
  ' ';
};

Pstruct ISAKMP_invalid_t{
  "! ";     Pstring(:':':) programName;
  ":line "; Puint32        lineNumber;
};

Punion ISAKMP_body_t (:ISAKMP_tag_t tag:){
  Pswitch(tag){
    Pcase NoProposal:    ISAKMP_message_t   noProposalMsg;
    Pcase ClientVersion: ISAKMP_client_t    clientMsg;
    Pcase invalid_id:    ISAKMP_invalid_t   invalidMsg;
    Pcase Invalid_ID:    ISAKMP_message_t   InvalidMsg;
  }
};

Pstruct ISAKMP_t{
  " ["; Puint32                     ISAKMP_id;
  "] "; ISAKMP_tag_t                ISKAMP_tag;
        ISAKMP_body_t(:ISKAMP_tag:) ISKAMP_body;
};

Penum SecurityMsgTag_t{ SecuritySession Pfrom("Session"), Alert};

Punion Host_t{
  Pchar                unavailable : unavailable == '-';
  Pstring(:']':)       noNetwork : Pstring_eq_cstr(&noNetwork, "No Access Network");
  Pip                  ipAddress;
  Pstring(:']':)       namedHost;
};

Punion Trailer_t{
  Pstring_ME(:"/Access Network Passed/":)       accessNetwork;
  Puint32                                       trailer_id;
}

Pstruct address_t{
  "IPSEC["; Host_t host; 
  "]:";     Trailer_t trailer;
};

Pstruct PhysicalAddresses_t{
  "physical addresses: ";
  "remote ";  Pip remoteIP;
  " local ";  Pip localIP;
};

Punion PipOpt{
  Pchar unavailable : unavailable == '-';
  Pip IPAddress;
};

Pstruct IPPair_t{
  PipOpt ip1;
  ' '; 
  PipOpt ip2;
};

Pstruct AssignedIP_t{
  "assigned IP address ";
  Pip assignedIP;
  ", mask ";  
  Pip assignedMask;
};

Punion SecuritySessionBody_t{
    PhysicalAddresses_t                physicalAddresses;
    Pstring_ME(:"/logged out/":)       loggedOut;
    IPPair_t                           ipPair;
    AssignedIP_t                       assignedIP;
};


Pstruct SecuritySession_t{
  address_t address;
  ' ';  SecuritySessionBody_t securitySessionBody;
};

Pstruct SecurityAlert_t{
  "IP OPTIONS RECEIVED from "; Pip            src;
  " (";                        Pstring(:')':) explanation;
  ')';
};


Punion SecurityBody_t(:SecurityMsgTag_t tag:){
  Pswitch(tag){
    Pcase (SecuritySession): SecuritySession_t securitySession;
    Pcase (Alert):           SecurityAlert_t securityAlert;
  }
};

Pstruct Security_t {
  " ["; Puint32 security_id;
  "] "; SecurityMsgTag_t securityTag;
  ": "; SecurityBody_t(:securityTag:) securityBody;
};

Pstruct FailedLogIn_t{
  ": Username=";  Pstring(:':':)   userName;
  /*  ": Date/Time="; Pdate(:' ':)     loginDate; */
  ": Date/Time="; Pstring(:' ':)     loginDate; 
  ' ';            Ptime_SE(:Peor:) loginTime;
};

Pstruct SNMPTraps_t{
  " [";  Puint32   snmpTrapsID;
  "] ";  Puint32[] snmpTrapsList : Psep('.') && Pterm(' ');
  ' ';   Puint32   snmpInt1;
  ' ';   Puint32   snmpInt2;
  " SNMP Servers: ";
         Pstring(:';':) srvMessage;
  "; \\n";
  
};

Punion Version_t{
  "unknown";
  Pstring(:')':) vName;
};

Punion Action_t{
  "none";
  Pstring(:')':) aName;
};


Pstruct Session_t{
  ": "; address_t sessionAddress;
  " Incoming client version (";  Version_t incVersion;
  "), minimum version (";        Version_t minVersion;
  ") push action (";             Action_t  action;
  "), action not needed";
};

Penum MsgTy_t{
  CSFW, failed Pfrom("Failed Login Attempt"),  ISAKMP, Security, Session, SNMPTraps 
};


Punion MsgPayload_t(:MsgTy_t ty:){
  Pswitch (ty){ 
    Pcase CSFW     :  CSFW_t        csfw;
    Pcase ISAKMP   :  ISAKMP_t      isakmp;
    Pcase Security :  Security_t    security;
    Pcase failed   :  FailedLogIn_t failedLogIn;
    Pcase SNMPTraps:  SNMPTraps_t   snmpTraps;
    Pcase Session  :  Session_t     session;
  }
};

Pstruct main_t{
  ' '; Puint32 int1;
  ' '; Pstring(:' ':) date2;
  /*  ' '; Pdate(:' ':) date2; */
  ' '; Ptime(:' ':) time2;
  ' '; Pstring(:' ':) mgr;
  ' '; Puint8 id;
  " : "; MsgTy_t msgTy;
       MsgPayload_t(:msgTy:) msg;
};

Punion Body_t{
  main_t   main_exp;
  repeat_t repeat;
};

Precord Pstruct entry_t{
  /*       Pdate_explicit_ME(:"/[a-zA-Z]+\\s[0-9]+/", "%b %d", P_cstr2timezone("-0400"):) date; */
       Pstring_ME(:"/Feb 12/":) date;
  ' '; Ptime(:' ':) time;
  ' '; SysName_t    systemName;
  ' '; Body_t       body;
}
