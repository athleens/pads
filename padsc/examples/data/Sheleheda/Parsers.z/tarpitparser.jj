/*******************************************************************************
 AT&T Tarpit log parser for NSM 

 James Yang at AT&T ; 
   10/20/2003  first implementation
   11/20/2003  new format
   12/16/2003  fix logic for Inital Connect type. Was not working *sna*
   12/16/2003  change agg_index to take out type.  *sna*

  Usage: java tarpitparser aggregate_record_count dump_time min_aggregate_count
  Usage: tail -f log | java tarpitparser 200000(rec) 1(agg) NSM_port
  06/16: add socket connection.
         if NSM_port is 0, the output goes to terminal instead of network

Example of log : (old format)
2003.07.15 17.42.46:mdtwnj21tar01:Activity:135.54.7.157:13652:135.16.65.248:1243

New format:
Oct 30 15:15:05 bdmnnj11tar01 : Persist Activity: 135.43.202.169 3869 -> 135.44.35.69 135 *
Oct 30 12:32:31 mdtwnj21tar01 : Responded to a Ping: 135.16.65.168 -> 135.16.65.199 *

*******************************************************************************/

PARSER_BEGIN(tarpitparser) 

import java.util.Enumeration;
import java.util.Map;
import java.util.HashMap;
import java.util.*;
import java.lang.String;
import java.lang.*;
import java.text.*;
import java.net.*;
import java.io.*;
import java.util.Timer;
import java.util.TimerTask;  

class pub_data{
   public static boolean debug = false ;
   public static boolean dumping = false ;
   public static int max_rec = 200000 ;
   public static int max_rec_static = 200000 ;
   public static int dotimer = 5 * 60 ;
   public static int min_agg = 1 ;
   public static int tot_agg_count = 0;
   public static int tot_rec_count = 0;
   public static int tot_skip_count = 0 ;
   public static int timer_rec_count = 0 ;
   public static PrintWriter out_put;
   public static Socket socket = null ;
   public static String sock_server = "127.0.0.1" ; /* local */
   public static int sock_port = 0  ;
   public static String src_year = "" ;
}

class P_Line {
      public static	String d_date ;
      public static	String s_ip ;
      public static	String t_ip ;
      public static	String type ;
      public static	String facility_ip ;
      public static	String s_port ;
      public static	String t_port ;
      public static	String proto ;

      public static	String agg_index = "";
      public static	String agg_index1 = "";
      public static     String agg_string = "" ;

      public static int process_line(String buf_line, Map aggregates) {
        // System.err.println("proc=" + buf_line); 
         StringTokenizer token_line = new StringTokenizer(buf_line," ");
         int t_count = 0 ; 
         int maxtokens = 16 ;  //max fields-1 (starting from [0])
         int ic, tmp, tmp1 ;
      GregorianCalendar gc = new GregorianCalendar(); 
      int year = gc.get(Calendar.YEAR);
         String monthlist = "JanFebMarAprMayJunJulAugSepOctNovDec" ; 
         String tokens[] ;
         String tmp_str1, tmp_str2 ;
	 Date   date_obj = new Date() ;
         tokens = new String[maxtokens];
         pub_data pub = new pub_data() ;  
	

        // System.err.println("line length = " + buf_line.length() ); 
         //if ( buf_line.length() < 50  ) return(-1);
         while ( token_line.hasMoreTokens() ) {
            if ( ++t_count > maxtokens-1 ) return(-5) ;
            tokens[t_count] = (String)(token_line.nextToken()) ;
         //   System.err.println("token " + t_count + " =[" + tokens[t_count] + "]" ); 
         }
         if ( ( tokens[1].length() != 3 ) ) return(-10) ;  /* mon */

         if ( (ic=monthlist.indexOf(tokens[1])) == -1) {return(-15) ; }
         ic = ic/3 + 1 ;
//         if ( ic > 10 ) 
//            tmp_str1 = "2003"  ;
//         else
//            tmp_str1 = "2004"  ;
//         if ( ic < 10 ) 
//            { d_date=tmp_str1 + "-0" + ic + "-" + tokens[2] + " " + tokens[3]; }
//         else
//            { d_date=tmp_str1 + "-" + ic + "-" + tokens[2] + " " + tokens[3]; }
         if ( ic < 10 ) 
            { d_date = pub.src_year + "-0" + ic + "-" + tokens[2] + " " + tokens[3]; }
         else
            { d_date = pub.src_year + "-" + ic + "-" + tokens[2] + " " + tokens[3]; }
         //System.err.println("date =[" + d_date + "]" );

         facility_ip = tokens[4] ;
         type = tokens[6] + " " + tokens[7] ;
         if ( type.indexOf("Responded to") != -1 ) {
	    if ( t_count != 12 && t_count != 13 ) return(-31); 
	    s_ip = tokens[10]; s_port = "0";
	    t_ip = tokens[12]; t_port = "0";
            type = type + " " + tokens[8] + " " + tokens[9];
            type = type.substring(0,type.length()-1);
         } else if ( type.indexOf("Persist Activity:") != -1 ) {
	    if ( t_count != 12 && t_count != 13 ) return(-41); 
	    s_ip = tokens[8]; s_port = tokens[9] ;
	    t_ip = tokens[11]; t_port = tokens[12] ;
            type = type.substring(0,type.length()-1);
         } else if ( type.indexOf("Initial Connect") != -1 ) {
	    if ( t_count != 14 && t_count != 15 ) return(-61); 
	    s_ip = tokens[10]; s_port = tokens[11] ;
	    t_ip = tokens[13]; t_port = tokens[14] ;
            type = type + " " + tokens[8] + " " + tokens[9];
            type = type.substring(0,type.length()-1);
         } else if ( type.indexOf("Persist Trapping:") != -1 ) {
	    if ( t_count != 12 && t_count != 13 ) return(-71); 
	    s_ip = tokens[8]; s_port = tokens[9] ;
	    t_ip = tokens[11]; t_port = tokens[12] ;
            type = type.substring(0,type.length()-1);
         } else if ( type.indexOf("Additional Activity") != -1 ) {
            return(-81);
         } else { 
            return(-91);
         }  

         do_agg_line( aggregates );
	 return(1);
      } // end of process_line 

      public static void do_agg_line( Map aggregates )
      {
        pub_data pub = new pub_data() ;  
	{
	   /* Aggregate is defined here */

	   agg_index = s_ip + t_ip + t_port ;
	   agg_index1 = 
"\ttype\n" + type +  
"\tfacility_ip\n"+ facility_ip + 
"\tfacility\ntarpit" + 
"\ts_ip\n" + s_ip + 
"\ts_port\n" + s_port +
"\tt_ip\n" + t_ip + 
"\tt_port\n" + t_port;

	   //System.err.println("buffer=[" + agg_index1 + "]");
	   Object tmp_agg = aggregates.get(agg_index) ;
	   //System.err.println("t1: " + tmp_agg );
	   if ( tmp_agg == null ) { 
               agg_string = "1" +  
               "\tbatch_start\n"+d_date + "\tbatch_end\n"+d_date +  //nodate
               agg_index1 ;
	       aggregates.put( agg_index, agg_string );

	   } else {
	       StringTokenizer agg_tokstring = new StringTokenizer( (String)tmp_agg, "\t" );
               String s_count = (String)(agg_tokstring.nextToken());
               Integer count = new Integer( Integer.parseInt(s_count) + 1 ) ;  
               String s_value1 = (String)(agg_tokstring.nextToken()); //nodate
               agg_string = count.toString() + 
                            "\t"+s_value1 +  "\tbatch_end\n"+d_date + //nodate
	                    agg_index1 ;
	       aggregates.put( agg_index, agg_string );
	   }
	}
      } //end of do_agg_line

} // end of class P_Line 

class Parse_input {
   public static String buffer ;
   public static int agcount = 0 ;

   public static void write_out(String data)
   {
      pub_data pub = new pub_data() ;  

      if ( pub.sock_port != 0 )
         { pub.out_put.println( data ); }
      else
         { System.out.println( data ); }
   } 

   /* Dumps the aggregate */
   public static void dump( Map aggregates, int min_aggregate_dump ) throws Exception {
	Iterator hashit = aggregates.keySet().iterator();
        pub_data pub = new pub_data() ;  

        /* reconnect to the server if necessary */
        if ( pub.sock_port != 0 )
        {
        connect_svr_class consvr = new connect_svr_class();
        while ( consvr.connect_svr() < 0 ) 
           {
	   System.err.println("Tarpit Parser will retry in 5 seconds... " );
	   Thread.sleep(5000);    //for debug socket
           } 
	//System.err.println("-- socket Connected!" );
        }
        //agcount += 100 ;
	while (hashit.hasNext()) {
	   //System.err.println("agg_count " + ++agcount );
	   String nor_rec = (String)hashit.next();
	   StringTokenizer parser = new StringTokenizer((String)aggregates.get(nor_rec),"\t" ) ;
	   String s_count = (String)(parser.nextToken());
	   Integer count = new Integer( Integer.parseInt(s_count) );
	   if ( count.intValue() >= min_aggregate_dump ) {
		write_out( "tarpitagg" );
		while ( parser.hasMoreTokens() ) {
	  	   StringTokenizer interior_parser = new StringTokenizer ( parser.nextToken(), "\n" );
		   String key = (String)(interior_parser.nextToken()); 
		   String val = (String)(interior_parser.nextToken()); 
		   //System.err.println("-key=[" + key + "] value=[" + val + "]" );
                   if ( ! val.equals(";") )
		       write_out( " " + key + " " + val );
		}
		write_out( " agg_count " + count );
		write_out( "endtarpitagg" );
	   }
        } // end of while
        if ( pub.sock_port != 0 )
           {
           try { pub.socket.close(); }
           catch (IOException e) { System.err.println(e); }
	   //System.err.println("-- socket disconnected!" );
	   Thread.sleep(3000);    //let remote settle down....
           }

   } // end of dump

   public void r_input() throws Exception {
      Map aggregates = new HashMap();
      int record_count = 0;
      int rc ;
      Calendar start_date = new GregorianCalendar(); 
      // DateFormat start_date = DateFormat.getDateInstance();
      long start = System.currentTimeMillis();
      pub_data pub = new pub_data() ;  

      InputStreamReader inreader = new InputStreamReader(System.in);
      BufferedReader bufreader = new BufferedReader( inreader );
      P_Line proc_line = new P_Line();

      System.err.println("UPDATE: Process New Tarpit Log...." ); 

      while ( ( buffer = bufreader.readLine()) != null ) 
      {
    	 //System.err.println(buffer); 
         if ( ( rc = P_Line.process_line(buffer, aggregates) ) < 0 )
            {
            if ( rc > -999 && pub.debug ) 
             {
             System.err.println("-Error return from proc line = " + rc ); 
             System.err.println("-line[" + buffer + "]" ); 
             pub.tot_skip_count++;
             }
            continue;
            }
         //System.err.println("return form proc line" ); 
         record_count++;  pub.tot_rec_count++;
         if ( record_count >= pub.max_rec ) {
	    System.err.println("UPDATE: " + new GregorianCalendar().getTime() + "(dump interval " + pub.max_rec_static + " entries)" + "\n" + record_count + "/" + pub.tot_rec_count + " records processed, total " + pub.tot_skip_count + " records skipped (bad format), " + aggregates.size() + " aggregates, efficiency " + (float)aggregates.size()/(float)record_count  + "\n" ) ;
	    dump(aggregates, pub.min_agg);
	    pub.max_rec = pub.max_rec_static ;
	    pub.tot_agg_count = pub.tot_agg_count + aggregates.size();
	    aggregates = new HashMap();
	    record_count = 0;
	 } // end if
	 //  Thread.sleep(3000);    //for debug socket
      } // end while reading the input file
      pub.tot_agg_count = pub.tot_agg_count + aggregates.size();
      System.err.println("UPDATE(EOF): " + new GregorianCalendar().getTime() + "(dump interval " + pub.max_rec_static + " entries)" + "\nTotal " + record_count + "/" + pub.tot_rec_count + " records processed, total " + pub.tot_skip_count + " records skipped (bad format), " + aggregates.size() + "/" + pub.tot_agg_count + " aggregates, efficiency " + (float)aggregates.size()/(float)record_count + "/" + (float)pub.tot_agg_count/(float)pub.tot_rec_count + "\n" ) ;
      dump(aggregates, pub.min_agg); 

      /*
      long elapsedTimeMillis = System.currentTimeMillis()-start;
      float recordsPerSecond = record_count / elapsedTimeMillis * 1000F ;
      write_out( "tarpitagg" );
      write_out( " processing_start " + start_date.getTime() );
      write_out( " processing_end " + new GregorianCalendar().getTime() );
      write_out( " raw_record_count " + pub.tot_rec_count );
      write_out( " agg_record_count " + pub.tot_agg_count );
      write_out( " agg_compression " + (float)pub.tot_agg_count/(float)pub.tot_rec_count );
      write_out( " records_per_second " + recordsPerSecond );
      write_out( " records_per_minute " + recordsPerSecond * 60 );
      write_out( " records_per_hour " + recordsPerSecond * 60 * 60 );
      write_out( " records_per_day " + recordsPerSecond * 60 * 60 * 24 );
      write_out( "endtarpitagg\n" );
      */

   } // end of r_input

} // end of class Parse_input

class dmp_timer {
  static Timer timer ;
  static int timercount = 0 ;
    public void dmp_timer(int seconds) {
        timer = new Timer();
        timer.schedule(new RemindTask(), seconds*1000);
    }
    class RemindTask extends TimerTask {
        public void run() {
            pub_data pub = new pub_data() ; 
            if ( pub.tot_rec_count-pub.timer_rec_count<pub.max_rec_static/2)
               { pub.max_rec = 1 ; }
            if ( pub.tot_rec_count > 999999999 )  pub.tot_rec_count = 0 ; 
            pub.timer_rec_count = pub.tot_rec_count;
	    //System.err.println( "-timer cnt=" + timercount++ );
            ////timer.cancel();	       no time in the code
            ////dmp_timer calltimer= new dmp_timer();   no time in the code
            ////calltimer.dmp_timer( pub.dotimer );   no time in the code
        }
    }
}

class connect_svr_class
{
     public static int connect_svr() throws Exception
     {
        pub_data pub = new pub_data() ; 

        // connect to NSM listner port
        try {
            pub.socket = new Socket(pub.sock_server, pub.sock_port);
            //System.err.println("Connected with server " +
            //   pub.socket.getInetAddress() + ":" + pub.socket.getPort());
            }
        catch (UnknownHostException e) {
            System.err.println("-Err Socket Err: " + e);
            return(-1);
     	    }
	catch (IOException e) {
      	    System.err.println("-Error, Fail to send NSM : " + e);
      	    System.err.println(" Need to Check NSM Listner for Tarpit... \n");
  	    return(-1);
   	    }
        // setup output to NSM
	pub.out_put = new PrintWriter(pub.socket.getOutputStream(),true);
	return(1);
    }

} // end of connect_svr 

public class tarpitparser {
	public static void main(String args[]) throws Exception {
        pub_data pub = new pub_data() ; 

	int icc ; int iargs = args.length ;
        for ( icc=0 ; icc < args.length; icc++ ) {
           if ( args[icc].equals("-d") ) {
             System.err.println("-Info- debug enabled!" ); 
             pub.debug = true ; iargs -= 1 ;
           }
           else if ( pub.debug ) { args[icc-1] = args[icc]; }
        }
        System.err.println("args # = " + iargs )  ;
        for ( icc=0 ; icc < iargs; icc++ ) {
           System.err.println("args " + icc + " = " + args[icc] )  ;
        }

        if ( iargs != 4 )  {
	   System.err.println("usage: tarpitparser [-d] aggregate_cnt(200000) aggregate_min_bucket_size(1) NSM_port(1300 or 0 for no-socket) year" ); return;
	   }
	else {
	   pub.max_rec_static = pub.max_rec = Integer.parseInt(args[0]) ;
           pub.dotimer = 100000 ; 
           pub.min_agg = Integer.parseInt(args[1]) ;
	   pub.sock_port = Integer.parseInt(args[2]);
	   pub.src_year = args[3] ;
           }

	//tarpitparser parser = new tarpitparser(System.in);
        ////dmp_timer dmp_tmr1= new dmp_timer();   no time in the code
        ////dmp_tmr1.dmp_timer(pub.dotimer);   no time in the code
	//parser.Input(); 
	Parse_input readinput = new Parse_input();

        readinput.r_input();  

	} // end of main 
}

PARSER_END(tarpitparser)

void voidInput() : { } { (" "   { })+ } 

/**************************************************************************
**********************************  end  **********************************
**************************************************************************/
