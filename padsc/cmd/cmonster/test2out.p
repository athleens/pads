/*
 *  This is a PADSL description of the cmonster output that results from the following cookie spec:
 *
 *  -c 's+{qyswitch=Pa_int32_FW(:3:)[0]/-1:c{qy1=Pa_string_FW(:8:)[3]}/0:c{qy2=Pa_string_FW(:7:)[4]}/1:c{qy3=Pa_string_FW(:2:)[3]|qy4=Pa_string_FW(:4:)[5]}}'
 *
 * NB The actual output record width is 13, where the 13th bytes is a newline that is inserted only
 * for debugging purposes.  There are 12 data bytes, which should be read using the following
 * IO discipline:   fwrec(:0,12,1:)
 */

int validate_width(P_uint32 width) {
  if (width != 12) {
    sfprintf(sfstderr, "\n*** FATAL: unexpected, record width %lu != 12\n\n", (unsigned long)width);
    abort();
  }
  return 1;
}

int validate_magic(P_uint32 magic) {
  if (magic != 1668116334) {
    sfprintf(sfstderr, "\n*** FATAL: bad magic number, file not generated by cmonster\n\n");
    abort();
  }
  return 1;
}

Pstruct arm1 { /* switch val == -1 */
  Pa_string_FW(:8:)           qy1;
};

Pstruct arm2 { /* switch val == 0 */
  Pa_string_FW(:7:)           qy2;
  /* pad to max Punion width (8) */
  "\0";
};

Pstruct arm3 { /* switch val == 1 */
  Pa_string_FW(:2:)           qy3;
  Pa_string_FW(:4:)           qy4;
  /* pad to max Punion width (8) */
  "\0\0";
};

Punion sw_arms (Pint32 sval) {
  Pswitch (sval) {
    Pcase -1 : arm1                        a1;
    Pcase  0 : arm2                        a2;
    Pcase  1 : arm3                        a3;
  }
};

Precord Pstruct data_rec {
  Psbl_int32(:4:)             switch_val;
  sw_arms(:switch_val:)       arms;
};

Parray data_recs {
  data_rec [];
};

Precord Pstruct hdr_rec {
  Psbl_uint32(:4:)            width : validate_width(width);
  /* rest of record is 8 NULL chars, skip them */
  "\0\0\0\0\0\0\0\0";
};

Precord Pstruct magic_rec {
  Psbl_uint32(:4:)            magic : validate_magic(magic);
  /* rest of record is 8 NULL chars, skip them */
  "\0\0\0\0\0\0\0\0";
};

Pfile Pstruct out_file {
  hdr_rec                     hrec;
  magic_rec                   mrec;
  data_recs                   data;
};

